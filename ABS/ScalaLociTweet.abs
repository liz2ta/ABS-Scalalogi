module ScalaLociTweet;

import * from ABS.Scheduler;
import * from ABS.DC;

// INTERFACE PART @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

interface MessageI {
  Unit write(MessageI m);
  MessageI read();
}

interface ChannelI {
  Unit send(MessageI m);
  Fut<MessageI> receive();
}

// class A {
//   List<String> filtered;
//   List<String> getResult() { doStuff(); return filtered; }
//   Unit doStuff() {
//     filtered = filter((String t) => t=="multitier")(list["singletier","multitier"]);
//   }
// }

interface TweetI {
  Bool hasHashtag(String ht);
  String getAuthor();
  List<String> getHashtags();
  String getText();
}

interface Tier {
  Unit op();
}

interface InputI extends Tier {
  Unit retrieveTweetStream();
  List<TweetI> getTweetStream();
}

interface TweetFilterI extends Tier {
  Unit filterTweet(List<TweetI> tl);
  List<TweetI> getFilteredTweets();
}

interface TweetMapperI extends Tier {
  Unit mapTweet(List<TweetI> tl);
}

interface TweetFolderI extends Tier {
  Unit fold(Map<String, Int> tf);
}

// CLASS PART @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Message implements MessageI {
  List<TweetI> tl;

  Unit write(TweetI t) { this.tl = t; }
  TweetI read() { return tl; }
}

class Channel() implements ChannelI {
  Fut<MessageI> msg;
  Unit send(MessageI m) { this.msg = m; }
  Fut<MessageI> receive() { return msg; }
}

class Tweet(String author, String text, List<String> hashtags) implements TweetI {

  String getAuthor() {
    return author;
  }

  List<String> getHashtags() {
    return hashtags;
  }

  String getText() {
    return text;
  }

  Bool hasHashtag(String ht) {
    foreach (h in hashtags) {
      if (h == ht) {
        return True;
      }
    }
    return False;
  }
}

class Input(Channel c1) implements InputI {
  List<TweetI> tweetStream;

  Unit retrieveTweetStream() {
    tweetStream = list[];
    TweetI t = Tweet("user1", "text1", list["ht1","ht2"]);
    appendright(tweetStream,t);
    t = Tweet("user2", "text2", list["ht1","multitier"]);
    appendright(tweetStream,t);
  }

  Unit op() {
    this.retrieveTweetStream();
    c1!send(tweetStream);
  }
}

class TweetFilter(Channel c1, Channel c2) implements TweetFilterI {
  List<TweetI> filtered;

  Unit filterTweet(List<TweetI> tweetStream) {
    tweetStream = list[];
    TweetI t = Tweet("user1", "text1", list["ht1","ht2"]);
    appendright(tweetStream,t);
    t = Tweet("user2", "text2", list["ht1","multitier"]);
    appendright(tweetStream,t);
    filtered = tweetStream;//filter((TweetI t) => (t.hasHashtag("multitier")==True))(tweetStream);
  }

  Unit op() {
    this.filterTweet(c1!receive().get);
    c2!send(filtered);
  }
}

class TweetMapper(List<Channel> c) implements TweetMapperI {
  List<String> mapped;

  Unit mapTweet(List<TweetI> tl) {
    mapped = list[Pair("author1",1)]; //map((TweetI t) => t.getAuthor())(tl);
  }

  Unit op() {
    this.mapTweet(c1!receive().get);
    c2!send(mapped);
  }
}

class TweetFolder(Channel c1) implements TweetFolderI {
  Map<String, Int> folded;

  Unit fold(Map<String, Int> tf) {
    folded = list[Pair("author1",1)];//foldl ((m, author) => put(m, lookupDefault(m, author, 0) + 1)) (tf, map[]);
  }

  Unit op() {
    this.fold(c1.receive().get);
  }
}

// MAIN BLOCK @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// ScalaLoci runtime environment
{

  Channel c1 = new Channel();
  List<Tier> inputNodes = list[Input(c1)];
  Channel c2 = new Channel();
  List<Tier> filterNodes = list[TweetFilter(c1,c2)];
  Channel c3 = new Channel();
  List<Tier> mapperNodes = list[TweetMapper(c2,c3)];
  Channel c4 = new Channel();
  List<Tier> folderNodes = list[TweetFolder(c3,c4)];
  List<Tier> all = concatenate(concatenate(inputNodes, filterNodes), concatenate(mapperNodes, folderNodes));
  foreach(t in all) {
    t!op();
    await duration(1,1);
  }
}
