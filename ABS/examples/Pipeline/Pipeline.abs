/*************************************
Tweet example without ports, inspired by the scalalogy pipeline example
FIRST VERSION BY(2021.04.24): S. Lizeth Tapia Tarifa
************************************/

module Pipeline;
export *;

import * from Medium;
import * from Event;

interface InputI {
  Unit fire(Event t);
}

class Input(MediumI c1) implements InputI {
  Unit fire(Event t) {
    await c1!send(t);
    println(`Input has sent $t$`);
  }
}


interface FilterI {
  Unit filtered(Hashtag ht);
}

class Filter(MediumI c1, MediumI c2) implements FilterI {
  Unit filtered(Hashtag ht) {
    Event t = await c1!receive();
    foreach (h in hashtags(t)) {
      if (h == ht) {
        await c2!send(t);
        println(`Filter has sent $t$`);
      }
    }
    this!filtered(ht);
   }
}


interface MapperI {
  Unit mapped();
}

class Mapper(MediumI c2, MediumI c3) implements MapperI {
  Unit mapped() {
    Event t = await c2!receive();
    await c3!send(Author(authorId(t)));
    println(`Mapper has sent $authorId(t)$`);
    this!mapped();
  }
}

interface FolderI  {
  Unit folded();
  Unit printFolder();
}

class Folder(MediumI c3) implements FolderI {
  Map<String,Int> folded = map[];
  Unit folded() {
    Event a = await c3!receive();
    println(`==FOLDER HAS RECEIVED $a$==`);
    folded = put(folded, authorId(a), lookupDefault(folded, authorId(a), 0)+1);
    this!folded();
  }

  Unit printFolder(){
    foreach (e in  entries(folded)) {
      println(`$e$`);
    }
  }

}
