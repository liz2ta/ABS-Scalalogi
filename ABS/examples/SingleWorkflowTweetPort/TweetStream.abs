/*************************************
Tweet example, inspired by the scalalogy pipeline example
FIRST VERSION BY(2021.04.24): S. Lizeth Tapia Tarifa
************************************/


module TweetStream;
export *;

import * from Medium;
import * from Event;
import * from Stream;
import * from Port;

interface InputI extends Tier {
  Unit fire(Event t);
}

class Input(PortI p, Tier tier) implements InputI {

  Unit connectTier(Tier t){skip;}
  Unit connectPort(PortI p){skip;}

  Unit fire(Event t) {
    p!fire(tier,t);
  //  println(`Input has sent $t$`);
  }
}


interface FilterI extends Tier {
  Unit filtered(Hashtag ht);
}

class Filter(PortI p1, PortI p2, Tier tier) implements FilterI {

  Unit connectTier(Tier t){skip;}
  Unit connectPort(PortI p){skip;}

  Unit filtered(Hashtag ht) {
    StreamM filter = Nil;
    duration(5,5);
    StreamM st = await p1!receive(this);
    println(`Filter has received $st$`);
    foreach (m in st) {
      foreach (h in hashtags(m)) {
        if (h == ht) {
          filter = appendright(filter,m);
          //println(`Filter has filter $m$`);
        }
      }
    }
    p2!send(tier,filter);
    println(`Filter has sent $filter$`);
    this!filtered(ht);
   }
}


interface MapperI extends Tier {
  Unit mapped();
}

class Mapper(PortI p2, PortI p3, Tier tier) implements MapperI {

  Unit connectTier(Tier t){skip;}
  Unit connectPort(PortI p){skip;}

  Unit mapped() {
    StreamM map = Nil;
    duration(5,5);
    StreamM st = await p2!receive(this);
    foreach (m in st) {
      map = appendright(map,Author(authorId(m)));
    }
    p3!send(tier,map);
    println(`Mapper has sent $map$`);
    this!mapped();
  }
}

interface FolderI extends Tier  {
  Unit folded();
  Unit printFolder();
}

class Folder(PortI p3) implements FolderI {
  Map<String,Int> folded = map[];

  Unit connectTier(Tier t){skip;}
  Unit connectPort(PortI p){skip;}
  
  Unit folded() {
    duration(5,5);
    StreamM st = await p3!receive(this);
    println(`==FOLDER HAS RECEIVED $st$==`);
    foreach (m in st) {
      folded = put(folded, authorId(m), lookupDefault(folded, authorId(m), 0)+1);
    }
    this!folded();
  }

  Unit printFolder(){
    foreach (e in  entries(folded)) {
      println(`$e$`);
    }
  }

}
