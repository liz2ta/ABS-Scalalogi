
module Tweet;
export *;

import * from Channel;
import * from Event;

interface InputI {
  Unit fire(Event t);
}

class Input(ChannelI c1) implements InputI {
  Unit fire(Event t) {
    await c1!send(t);
    println(`Input has sent $t$`);
  }
}


interface TweetFilterI {
  Unit filterTweet(Hashtag ht);
}

class TweetFilter(ChannelI c1, ChannelI c2) implements TweetFilterI {
  Unit filterTweet(Hashtag ht) {
    Event t = await c1!receive();
    foreach (h in hashtags(t)) {
      if (h == ht) {
        await c2!send(t);
        println(`Filter has sent $t$`);
      }
    }
    this!filterTweet(ht);
   }
}


interface TweetMapperI {
  Unit mapTweet();
}

class TweetMapper(ChannelI c2, ChannelI c3) implements TweetMapperI {
  Unit mapTweet() {
    Event t = await c2!receive();
    await c3!send(Author(authorId(t)));
    println(`Mapper has sent $authorId(t)$`);
    this!mapTweet();
  }
}

interface TweetFolderI  {
  Unit fold();
  Unit printFolder();
}

class TweetFolder(ChannelI c3) implements TweetFolderI {
  Map<String,Int> folded = map[];
  Unit fold() {
    Event a = await c3!receive();
    println(`==FOLDER HAS RECEIVED $a$==`);
    folded = put(folded, authorId(a), lookupDefault(folded, authorId(a), 0)+1);
    this!fold();
  }

  Unit printFolder(){
    foreach (e in  entries(folded)) {
      println(`$e$`);
    }
  }

}
