

module Example;
import * from ABS.DC;


data Event = Ev(String message);
type EvList = List<Event>;
type ClSet = Set<IClient>;
type ClEvMap = Map<IClient,Event>;

interface IPort{
  //called by the client
  Unit connectClient(IClient client, String name);
  Unit connectServer(IServer server);
  Unit broadcastMsg();
  Unit start();
}

class Port() implements IPort{

  IServer server = null;
  ClSet clients = set[];
  ClEvMap msgs = map[];

  Unit connectServer(IServer s){
    server = s;
    println("Server connected");
  }

  Unit connectClient(IClient c , String n){
    clients = insertElement(clients, c);
    println("Client connected: " + n);
  }

  Unit broadcastMsg(){
    ClEvMap evmaptmp = map[];
    EvList evstmp = list[];
    foreach (c in elements(clients)) {
      [Cost: length(values(msgs))] skip;
      evmaptmp = removeKey(msgs,c);
      evstmp = values(evmaptmp);
      await c!listen(evstmp);
    }
  }

  Unit start(){
    Int i = 0;
    while (i<5){
      Event ev = Ev(" ");
      foreach (c in elements(clients)) {
        [Cost: 1] skip;
        ev = await c!firemsg();
        await server!collectMsg(c,ev);
      }
      msgs = await server!broadcastMsg();
      await this!broadcastMsg();
      i = i+1;
      println(" ");
    }
  }

}


interface IServer{
  //called by the port
  Unit collectMsg(IClient c, Event ev);
  ClEvMap broadcastMsg();
}



class Server() implements IServer{
  ClEvMap msgs = map[];

  Unit collectMsg(IClient c, Event ev){
    [Cost: 1]  msgs = put(msgs, c, ev);
  }

  ClEvMap broadcastMsg(){
    ClEvMap msgstmp = msgs;
    msgs = map[];
    [Cost: length(values(msgstmp)) ] return msgstmp;
  }

}


interface IClient{
  Unit listen(EvList evl);
  Event firemsg();
}

class Client(String name) implements IClient{

  Int i = 0;

  Unit listen(EvList evl){
    foreach (ev in evl) {
      println(name + " " + message(ev));
    }
  }

  Event firemsg() {
    i = i+1;
    return Ev("Hi Nro" + toString(i) + " from:" + name);

  }

}


{ // Main block:
  DC scomp = new DeploymentComponent("scomp", map[Pair(Speed, 100)]);
  DC pcomp = new DeploymentComponent("pcomp", map[Pair(Speed, 100)]);
 // println("starting servers");
  [DC: pcomp] IPort port = new Port();
  [DC: scomp] IServer server = new Server();
  await port!connectServer(server);

  IClient c1 =  new Client("C1");
  await port!connectClient(c1,"C1");
  IClient c2 =  new Client("C2");
  await port!connectClient(c2,"C2");
  IClient c3 =  new Client("C3");
  await port!connectClient(c3,"C3");

  await port!start();

}


// Local Variables:
// abs-use-timed-interpreter: t
// abs-indent: 2
// abs-target-language: erlang
// abs-clock-limit: 100
// End:
