// to compile and test with a channel
// absc --erlang test/TestPort/*.abs common/Channel/*.abs common/Stream/*.abs common/Port/*.abs

// to compile and test with messages
// absc --erlang test/TestPort/*.abs common/Message/*.abs common/Stream/*.abs common/Port/*.abs


module TestP;

import * from Medium;
import * from Event;
import * from Stream;
import * from Port;

class Tier() implements Tier {
  Unit foo(){skip;}
}

{
  StreamM msgs = list[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
  StreamM intermediate = Nil;

  PortI p = new Port();
  Tier tier = new Tier();

  await p!connect(tier,0);

   p!send(tier, msgs);
   duration(1);
  intermediate = await p!receive(tier);
  Int size = length(intermediate);
  Int i = 0;
  Event m = 0;

  while(i<size){
    m = head(intermediate);
    intermediate = tail(intermediate);
    println(`we have received $m$`);
    i = i+1;
  }
  println(`we finished processing messages`);
}
