module Stream;
import * from Event;
import * from Channel;
export *;

type StreamM = List<Event>;

interface InputStreamI {
  StreamM withdraw();
}


class InputStream(ChannelI c) implements InputStreamI {
  StreamM msgs = Nil;

  Unit  deposit() {
      Event m = await c!receive();
      msgs = appendright(msgs, m);
  }

  StreamM withdraw() {
    await !isEmpty(msgs);
    StreamM tmp = msgs;
    msgs = Nil;
    return tmp;
  }

  Unit run(){
    await this!deposit();
    this!run();
  }
}

interface OutputStreamI {
  Unit deposit(StreamM st);
}

class OutputStream(ChannelI c) implements OutputStreamI {
  StreamM msgs = Nil;

  Unit  deposit(StreamM st) {
      msgs = concatenate(msgs,st);
  }

  Unit withdraw() {
    await !isEmpty(msgs);
    Event h = head(msgs);
    msgs = tail(msgs);
    await c!send(h);
  }

  Unit run(){
    await this!withdraw();
    this!run();
  }
}
