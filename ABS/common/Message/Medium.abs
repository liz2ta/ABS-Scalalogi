module Medium;
import * from Event;
export *;

def List<A> takeout<A>(List<A> list, Int n) =
case list {
    Nil => Nil
    | Cons(h, t) =>
        case n {
            0  => Cons(h, t)
          |  1  => t
          | _ => Cons(h, takeout(t,n-1))}
  };

interface MediumI {
  Unit send(Event m);
  Event receive();
}


class Medium(Int size) implements MediumI {
  List<Event> msgs = Nil;
  Unit send(Event m) {
        msgs = appendright(msgs, m);
  }
  
  Event receive() {
    await !isEmpty(msgs);
    Int size = length(msgs);
    Int rdm = random(size);
    Event m = nth(msgs,rdm);
    msgs = takeout(msgs,rdm+1);
    return m;
  }
}
